#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

source $BUILD_DIR/_static_js.cfg

# Node Installation --------------------------

NODE_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
NODE_BUILD_DIR=$(mktemp -d -t node.XXXXXX)
git clone https://github.com/heroku/heroku-buildpack-nodejs.git $NODE_BUILDPACK_DIR
mv $NODE_BUILDPACK_DIR/vendor $LP_DIR
mv $NODE_BUILDPACK_DIR/bin/compile $LP_DIR/bin/compile_node

$LP_DIR/conf/package.json > $NODE_BUILD_DIR/package.json

$LP_DIR/bin/compile_node $NODE_BUILD_DIR $CACHE_DIR

export PATH=$PATH:$NODE_BUILD_DIR/bin:$NODE_BUILD_DIR/node_modules/.bin

# coffee-script import ----------------------

echo "-----> Importing coffee-script files..."
find $BUILD_DIR -iregex ".*\.coffee" | while read -r csfile
do
  echo -n "-----> applying imports in ${csfile#*$BUILD_DIR/}..." | indent
  importer "$csfile" "$csfile" | indent
  echo "done"
done
echo "       done."

# coffee-script compilation -----------------

if [ -f "$BUILD_DIR/Cakefile" ]; then
  echo -n "-----> Making Coffee using Cake..."
  curr_dir=$PWD
  cd $BUILD_DIR
  cake build | indent
  cd $curr_dir
  echo "done"
else
  echo -n "-----> Making Coffee..."
  coffee --compile --output $BUILD_DIR $BUILD_DIR | indent
  echo "done"
fi

echo "-----> Cleaning coffee..."
find $BUILD_DIR -iregex ".*\.coffee" | while read -r csfile
do
  rm -f "$csfile"
done
echo "       done."

# js import ---------------------------------

echo "-----> Importing js files..."
find $BUILD_DIR -iregex ".*\.js" | while read -r jsfile
do
  echo -n "-----> applying imports in ${jsfile#*$BUILD_DIR/}..." | indent
  fname=${jsfile%.*}
  importer "$jsfile" "$fname.i.js" | indent
  echo "done"
done
echo "       done."

# Closure Compiler Fetch --------------------

echo -n "-----> Fetching Closure Compiler..."
curl --silent --location http://closure-compiler.googlecode.com/files/compiler-latest.tar.gz | tar xz
echo "done"

# js compilation ----------------------------

echo "-----> Compiling JS files..."
find $BUILD_DIR -iregex ".*\.js" \! -iregex ".*\.min\.js" \! -path '*/libs/*' | while read -r jsfile
do
  echo -n "-----> compiling ${jsfile#*$BUILD_DIR/}..." | indent
  fname=${jsfile%.*}
  java -jar compiler.jar --js_output_file "$fname.min.js" --js "$jsfile" | indent
  jssha1=`openssl sha1 "$jsfile"`
  jssha1=${jssha1#*= }
  jssha1=${jssha1:0:8}
  cp "$fname.min.js" "$fname.$jssha1.js"
  echo "done"
done
echo "       done."
rm -f compiler.jar

# Static ------------------------------------

STATIC_BUILDPACK_DIR=$(mktemp -d -t static.XXXXXX)
git clone https://github.com/abhishekmunie/heroku-buildpack-static.git $STATIC_BUILDPACK_DIR
mv -R $STATIC_BUILDPACK_DIR/vendor/* $LP_DIR/vendor
mv $STATIC_BUILDPACK_DIR/bin/compile $LP_DIR/bin/compile_static
$LP_DIR/bin/compile_static $BUILD_DIR $CACHE_DIR

# Cleanup -----------------------------------
rm -f $NODE_BUILDPACK_DIR
rm -f $NODE_BUILD_DIR
rm -f $STATIC_BUILDPACK_DIR